{"version":3,"file":"static/js/832.b33c2105.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/devlop/lib/default.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","import parse from 'inline-style-parser';\nimport type { Declaration } from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","inline_style_parser_1","__importDefault","require","iterator","styleObject","default","hasIterator","forEach","ok","unreachable","emptyOptions","settings","one","includeImageAlt","includeHtml","Boolean","alt","all","children","values","result","index","join","blankLine","tokenize","effects","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","left","undefined","right","constructs","existing","before","add","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","includes","nameRe","nameReJsx","jsx","empty","Schema","normal","space","merge","definitions","assign","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","check","own","create","definition","properties","info","transform","attributes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","$0","camelcase","hastToReact","StyleToObject","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","isNaN","padRight","padLeft","commas","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","toDash","$1","urlAttributes","icon","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","Math","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","_ref","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","_len","_key","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","apply","then","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","convert","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","concat","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImpl","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","SKIP","reverse","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}